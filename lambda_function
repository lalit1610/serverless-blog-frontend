import json
import boto3
import uuid
from boto3.dynamodb.conditions import Key

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('BlogPosts')

def lambda_handler(event, context):
    method = event['httpMethod']

    # Helper to build response with CORS headers
    def build_response(status_code, body):
        return {
            'statusCode': status_code,
            'headers': {
                'Access-Control-Allow-Origin': '*',          # Allow all origins; for production restrict this
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'OPTIONS,GET,POST,PUT,DELETE',
            },
            'body': json.dumps(body)
        }

    # Handle preflight CORS OPTIONS request
    if method == 'OPTIONS':
        # This is important for CORS preflight requests
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'OPTIONS,GET,POST,PUT,DELETE',
            },
            'body': ''
        }
    
    try:
        if method == 'GET':
            params = event.get('queryStringParameters') or {}
            postId = params.get('postId')
            if postId:
                response = table.get_item(Key={'postId': postId})
                item = response.get('Item')
                if item:
                    return build_response(200, item)
                else:
                    return build_response(404, {'message': 'Post not found'})
            else:
                response = table.scan()
                return build_response(200, response.get('Items', []))

        elif method == 'POST':
            data = json.loads(event['body'])
            new_post = {
                'postId': str(uuid.uuid4()),
                'title': data['title'],
                'content': data['content'],
                'author': data.get('author', 'Anonymous'),
                'datePosted': data.get('datePosted', '')
            }
            table.put_item(Item=new_post)
            return build_response(201, new_post)

        elif method == 'PUT':
            data = json.loads(event['body'])
            postId = data['postId']
            table.update_item(
                Key={'postId': postId},
                UpdateExpression="set title=:t, content=:c, author=:a, datePosted=:d",
                ExpressionAttributeValues={
                    ':t': data['title'],
                    ':c': data['content'],
                    ':a': data['author'],
                    ':d': data['datePosted']
                }
            )
            return build_response(200, {'message': 'Post updated'})

        elif method == 'DELETE':
            params = event.get('queryStringParameters') or {}
            postId = params.get('postId')
            if not postId:
                return build_response(400, {'message': 'postId required'})
            table.delete_item(Key={'postId': postId})
            return build_response(200, {'message': 'Post deleted'})

        else:
            return build_response(405, {'message': 'Method not allowed'})

    except Exception as e:
        # Log exception details if needed
        print("Error:", e)
        return build_response(500, {'message': 'Internal Server Error'})


